from oslo.config import cfg

from ryu.lib.packet import arp
from ryu.lib.packet import ethernet
from ryu.lib.packet import packet
from ryu.lib import addrconv
from ryu.ofproto import ether

from daoliagent.services.base import PacketBase
from daoliagent.openstack.common import log as logging

CONF = cfg.CONF
CONF.register_opt(cfg.IntOpt('timeout', default=2))

LOG = logging.getLogger(__name__)

class PacketARP(PacketBase):
    def run(self, datapath, in_port, pkt_ethernet, pkt_arp, **kwargs):
        if pkt_arp.opcode != arp.ARP_REQUEST:
            LOG.debug("unknown arp op %s", pkt_arp.opcode)
            return False

        ofproto = datapath.ofproto
        ofp_parser = datapath.ofproto_parser

        mac_addr = pkt_arp.src_mac
        ip_addr = pkt_arp.dst_ip
        LOG.debug("***************start************")
        LOG.debug("arp request %(src_mac)s-%(src_ip)s -> %(dst_mac)s-%(dst_ip)s",
                  {'src_mac': mac_addr, 'src_ip': pkt_arp.src_ip,
                   'dst_mac': pkt_arp.dst_mac, 'dst_ip': ip_addr})

        address = '36:F0:9A:45:C6:43'

        print '#######',in_port, ofproto.OFPP_IN_PORT
        #actions = [ofp_parser.OFPActionOutput(ofproto.OFPP_IN_PORT)]
        actions = [ofp_parser.OFPActionOutput(in_port)]
        inst = [ofp_parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS,
                                                 actions)]
        #self.add_flow(datapath, in_port, actions, nw_dst=ip_addr)

        LOG.debug("arp response %(src_mac)s-%(src_ip)s -> %(dst_mac)s-%(dst_ip)s",
                  {'src_mac': address, 'src_ip': ip_addr,
                   'dst_mac': pkt_arp.src_mac, 'dst_ip': pkt_arp.src_ip})

        pkt = packet.Packet()
        pkt.add_protocol(ethernet.ethernet(ethertype=pkt_ethernet.ethertype,
                                           dst=pkt_ethernet.src,
                                           src=address))
        pkt.add_protocol(arp.arp(opcode=arp.ARP_REPLY,
                                 src_mac=address,
                                 src_ip=ip_addr,
                                 dst_mac=pkt_arp.src_mac,
                                 dst_ip=pkt_arp.src_ip))
        pkt.serialize()

        out = datapath.ofproto_parser.OFPPacketOut(
            datapath=datapath, buffer_id=ofproto.OFP_NO_BUFFER,
            in_port=in_port, actions=actions, data=pkt.data)

        datapath.send_msg(out)
        LOG.debug("***************end************")

    def add_flow(self, datapath, in_port, actions, **kwargs):
        actions = []

    def _add_flow(self, datapath, in_port, actions, **kwargs):
        ofproto = datapath.ofproto

        match = datapath.ofproto_parser.OFPMatch(
            in_port=in_port, dl_type=ether.ETH_TYPE_ARP,
            nw_dst=addrconv.ipv4._addr(kwargs['nw_dst']).value)

        print '########', match
        mod = datapath.ofproto_parser.OFPFlowMod(
            datapath=datapath, match=match, cookie=0,
            command=ofproto.OFPFC_ADD, idle_timeout=CONF.timeout,
            priority=ofproto.OFP_DEFAULT_PRIORITY,
            flags=ofproto.OFPFF_SEND_FLOW_REM, actions=actions)
        datapath.send_msg(mod)
