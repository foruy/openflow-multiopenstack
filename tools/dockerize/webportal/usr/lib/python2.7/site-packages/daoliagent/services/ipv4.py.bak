
from ryu.ofproto import ether
from ryu.ofproto import inet

from daoliagent.services.base import PacketBase
from daoliagent.lib import utils

class PacketIPv4(PacketBase):
    priority = 1

    def _rarefaction_tcp(self, dp, in_port, key, pkt_ipv4, pkt_tp,
                         src, src_gateway, dst, dst_gateway):
        ofp, ofp_parser, ofp_set, ofp_out = self.ofp_get(dp)

        rdp = self.ryuapp.dps[dst_gateway['datapath_id']]
        rofp, rofp_parser, rofp_set, rofp_out = self.ofp_get(rdp)

        dport = self.port_get(rdp, dst['id'])

        remote_input_actions = [rofp_set(eth_src=dst['mac_address']),
                                rofp_set(eth_dst=src['mac_address']),
                                rofp_set(ipv4_src=pkt_ipv4.src),
                                rofp_set(ipv4_dst=pkt_ipv4.dst),
                                rofp_out(dport)]

        remote_output_match = rofp_parser.OFPMatch(
                                in_port=dport,
                                ip_proto=inet.IPPROTO_TCP,
                                eth_src=dst['mac_address'],
                                ipv4_src=pkt_ipv4.dst,
                                ipv4_dst=pkt_ipv4.src)

        local_output_match = ofp_parser.OFPMatch(
                                in_port=in_port,
                                ip_proto=inet.IPPROTO_TCP,
                                ipv4_src=pkt_ipv4.src,
                                ipv4_dst=pkt_ipv4.dst,
                                tcp_src=pkt_tp.src_port,
                                tcp_dst=pkt_tp.dst_port)

        local_input_actions = [ofp_set(eth_src=dst['mac_address']),
                               ofp_set(eth_dst=src['mac_address']),
                               ofp_set(ipv4_src=pkt_ipv4.dst),
                               ofp_set(ipv4_dst=pkt_ipv4.src),
                               ofp_set(tcp_dst=pkt_tp.src_port),
                               ofp_out(in_port))

        if src_gateway['idc_id'] == dst_gateway['idc_id']:
            riport = self.port_get(rdp, devname=dst_gateway['int_dev'])
            liport = self.port_get(rdp, devname=src_gateway['int_dev'])
            remote_input_match = rofp_parser.OFPMatch(
                                     ip_proto=inet.IPPROTO_TCP,
                                     eth_dst=dst_gateway['int_mac'],
                                     ipv4_src=src_gateway['int_ip'],
                                     ipv4_dst=dst_gateway['int_ip'])

            remote_output_actions = [rofp_set(eth_src=dst_gateway['int_mac']),
                                     rofp_set(eth_dst=src_gateway['int_mac']),
                                     rofp_set(ipv4_src=dst_gateway['int_ip']),
                                     rofp_set(ipv4_dst=src_gateway['int_ip']),
                                     rofp_out(riport)]

            local_output_actions = [ofp_set(eth_src=src_gateway['int_mac']),
                                    ofp_set(eth_dst=dst_gateway['int_mac']),
                                    ofp_set(ipv4_src=src_gateway['int_ip']),
                                    ofp_set(ipv4_dst=dst_gateway['int_ip']),
                                    ofp_set(tcp_src=key),
                                    ofp_out(liport)]

            local_input_match = ofp_parser.OFPMatch(
                                    ip_proto=inet.IPPROTO_TCP,
                                    ipv4_src=dst_gateway['int_ip'],
                                    ipv4_dst=src_gateway['int_ip'],
                                    tcp_src=pkt_tp.dst_port,
                                    tcp_dst=key)

        else:
            report = self.port_get(rdp, devname=dst_gateway['ext_dev'])
            leport = self.port_get(rdp, devname=dst_gateway['ext_dev'])
            remote_input_match = ofp_parser.OFPMatch(
                                    ip_proto=inet.IPPROTO_TCP,
                                    eth_dst=dst_gateway['ext_mac'],
                                    ipv4_src=src_gateway['ext_ip'],
                                    ipv4_dst=dst_gateway['ext_ip'])

            remote_output_actions = [ofp_set(eth_src=dst_gateway['ext_mac']),
                                     ofp_set(eth_dst=dst_gateway['idc_mac']),
                                     ofp_set(ipv4_src=dst_gateway['ext_ip']),
                                     ofp_set(ipv4_dst=src_gateway['ext_ip']),
                                     ofp_out(report)]

            local_output_actions = [ofp_set(eth_src=src_gateway['ext_mac']),
                                    ofp_set(eth_dst=src_gateway['idc_mac']),
                                    ofp_set(ipv4_src=src_gateway['ext_ip']),
                                    ofp_set(ipv4_dst=dst_gateway['ext_ip']),
                                    ofp_set(tcp_src=key),
                                    ofp_out(leport)]

            local_input_match = ofp_parser.OFPMatch(
                                    ip_proto=inet.IPPROTO_TCP,
                                    ipv4_src=dst_gateway['ext_ip'],
                                    ipv4_dst=src_gateway['ext_ip'],
                                    tcp_src=pkt_tp.dst_port,
                                    tcp_dst=key)

        self.send_msg_flow(rdp, remote_input_match, remote_input_actions, priority=20)
        self.send_msg_flow(rdp, remote_output_match, remote_output_actions, priority=20)
        self.send_msg_flow(dp, local_input_match, local_input_actions, priority=20)
        self.send_msg_flow(dp, local_output_match, local_output_actions, priority=20)

    def _rarefaction_udp(self, dp, in_port, key, pkt_ipv4, pkt_tp,
                         src, src_gateway, dst, dst_gateway):
        ofp, ofp_parser, ofp_set, ofp_out = self.ofp_get(dp)

        rdp = self.ryuapp.dps[dst_gateway['datapath_id']]
        rofp, rofp_parser, rofp_set, rofp_out = self.ofp_get(rdp)

        dport = self.port_get(rdp, dst['id'])

        remote_input_actions = [rofp_set(eth_src=dst['mac_address']),
                                rofp_set(eth_dst=src['mac_address']),
                                rofp_set(ipv4_src=pkt_ipv4.src),
                                rofp_set(ipv4_dst=pkt_ipv4.dst),
                                rofp_out(dport)]

        remote_output_match = rofp_parser.OFPMatch(
                                in_port=dport,
                                ip_proto=inet.IPPROTO_TCP,
                                eth_src=dst['mac_address'],
                                ipv4_src=pkt_ipv4.dst,
                                ipv4_dst=pkt_ipv4.src)

        local_output_match = ofp_parser.OFPMatch(
                                in_port=in_port,
                                ip_proto=inet.IPPROTO_TCP,
                                ipv4_src=pkt_ipv4.src,
                                ipv4_dst=pkt_ipv4.dst,
                                udp_src=pkt_tp.src_port,
                                udp_dst=pkt_tp.dst_port)

        local_input_actions = [ofp_set(eth_src=dst['mac_address']),
                               ofp_set(eth_dst=src['mac_address']),
                               ofp_set(ipv4_src=pkt_ipv4.dst),
                               ofp_set(ipv4_dst=pkt_ipv4.src),
                               ofp_set(udp_dst=pkt_tp.src_port),
                               ofp_out(in_port))

        if src_gateway['idc_id'] == dst_gateway['idc_id']:
            riport = self.port_get(rdp, devname=dst_gateway['int_dev'])
            liport = self.port_get(rdp, devname=src_gateway['int_dev'])
            remote_input_match = rofp_parser.OFPMatch(
                                     ip_proto=inet.IPPROTO_TCP,
                                     eth_dst=dst_gateway['int_mac'],
                                     ipv4_src=src_gateway['int_ip'],
                                     ipv4_dst=dst_gateway['int_ip'])

            remote_output_actions = [rofp_set(eth_src=dst_gateway['int_mac']),
                                     rofp_set(eth_dst=src_gateway['int_mac']),
                                     rofp_set(ipv4_src=dst_gateway['int_ip']),
                                     rofp_set(ipv4_dst=src_gateway['int_ip']),
                                     rofp_out(riport)]

            local_output_actions = [ofp_set(eth_src=src_gateway['int_mac']),
                                    ofp_set(eth_dst=dst_gateway['int_mac']),
                                    ofp_set(ipv4_src=src_gateway['int_ip']),
                                    ofp_set(ipv4_dst=dst_gateway['int_ip']),
                                    ofp_set(udp_src=key),
                                    ofp_out(liport)]

            local_input_match = ofp_parser.OFPMatch(
                                    ip_proto=inet.IPPROTO_TCP,
                                    ipv4_src=dst_gateway['int_ip'],
                                    ipv4_dst=src_gateway['int_ip'],
                                    udp_src=pkt_tp.dst_port,
                                    udp_dst=key)
        else:
            report = self.port_get(rdp, devname=dst_gateway['ext_dev'])
            leport = self.port_get(rdp, devname=dst_gateway['ext_dev'])
            remote_input_match = ofp_parser.OFPMatch(
                                    ip_proto=inet.IPPROTO_TCP,
                                    eth_dst=dst_gateway['ext_mac'],
                                    ipv4_src=src_gateway['ext_ip'],
                                    ipv4_dst=dst_gateway['ext_ip'])

            remote_output_actions = [ofp_set(eth_src=dst_gateway['ext_mac']),
                                     ofp_set(eth_dst=dst_gateway['idc_mac']),
                                     ofp_set(ipv4_src=dst_gateway['ext_ip']),
                                     ofp_set(ipv4_dst=src_gateway['ext_ip']),
                                     ofp_out(report)]

            local_output_actions = [ofp_set(eth_src=src_gateway['ext_mac']),
                                    ofp_set(eth_dst=src_gateway['idc_mac']),
                                    ofp_set(ipv4_src=src_gateway['ext_ip']),
                                    ofp_set(ipv4_dst=dst_gateway['ext_ip']),
                                    ofp_set(udp_src=key),
                                    ofp_out(leport)]

            local_input_match = ofp_parser.OFPMatch(
                                    ip_proto=inet.IPPROTO_TCP,
                                    ipv4_src=dst_gateway['ext_ip'],
                                    ipv4_dst=src_gateway['ext_ip'],
                                    udp_src=pkt_tp.dst_port,
                                    udp_dst=key)

        self.send_msg_flow(rdp, remote_input_match, remote_input_actions, priority=20)
        self.send_msg_flow(rdp, remote_output_match, remote_output_actions, priority=20)
        self.send_msg_flow(dp, local_input_match, local_input_actions, priority=20)
        self.send_msg_flow(dp, local_output_match, local_output_actions, priority=20)


    def _rarefaction_icmp(self, dp, in_port, key, pkt_ipv4, pkt_tp,
                         src, src_gateway, dst, dst_gateway):
        ofp, ofp_parser, ofp_set, ofp_out = self.ofp_get(dp)

        rdp = self.ryuapp.dps[dst_gateway['datapath_id']]
        rofp, rofp_parser, rofp_set, rofp_out = self.ofp_get(rdp)

        dport = self.port_get(rdp, dst['id'])

        remote_input_actions = [rofp_set(eth_src=dst['mac_address']),
                                rofp_set(eth_dst=src['mac_address']),
                                rofp_set(ipv4_src=pkt_ipv4.src),
                                rofp_set(ipv4_dst=pkt_ipv4.dst),
                                rofp_out(dport)]

        remote_output_match = rofp_parser.OFPMatch(
                                in_port=dport,
                                ip_proto=inet.IPPROTO_TCP,
                                eth_src=dst['mac_address'],
                                ipv4_src=pkt_ipv4.dst,
                                ipv4_dst=pkt_ipv4.src)

        local_output_match = ofp_parser.OFPMatch(
                                in_port=in_port,
                                ip_proto=inet.IPPROTO_TCP,
                                ipv4_src=pkt_ipv4.src,
                                ipv4_dst=pkt_ipv4.dst,
                                tcp_src=pkt_tp.src_port,
                                tcp_dst=pkt_tp.dst_port)

        local_input_actions = [ofp_set(eth_src=dst['mac_address']),
                               ofp_set(eth_dst=src['mac_address']),
                               ofp_set(ipv4_src=pkt_ipv4.dst),
                               ofp_set(ipv4_dst=pkt_ipv4.src),
                               ofp_set(tcp_dst=pkt_tp.src_port),
                               ofp_out(in_port))

        if src_gateway['idc_id'] == dst_gateway['idc_id']:
            riport = self.port_get(rdp, devname=dst_gateway['int_dev'])
            liport = self.port_get(rdp, devname=src_gateway['int_dev'])
            remote_input_match = rofp_parser.OFPMatch(
                                     ip_proto=inet.IPPROTO_TCP,
                                     eth_dst=dst_gateway['int_mac'],
                                     ipv4_src=src_gateway['int_ip'],
                                     ipv4_dst=dst_gateway['int_ip'])

            remote_output_actions = [rofp_set(eth_src=dst_gateway['int_mac']),
                                     rofp_set(eth_dst=src_gateway['int_mac']),
                                     rofp_set(ipv4_src=dst_gateway['int_ip']),
                                     rofp_set(ipv4_dst=src_gateway['int_ip']),
                                     rofp_out(riport)]

            local_output_actions = [ofp_set(eth_src=src_gateway['int_mac']),
                                    ofp_set(eth_dst=dst_gateway['int_mac']),
                                    ofp_set(ipv4_src=src_gateway['int_ip']),
                                    ofp_set(ipv4_dst=dst_gateway['int_ip']),
                                    ofp_set(tcp_src=key),
                                    ofp_out(liport)]

            local_input_match = ofp_parser.OFPMatch(
                                    ip_proto=inet.IPPROTO_TCP,
                                    ipv4_src=dst_gateway['int_ip'],
                                    ipv4_dst=src_gateway['int_ip'],
                                    tcp_src=pkt_tp.dst_port,
                                    tcp_dst=key)
        else:
            report = self.port_get(rdp, devname=dst_gateway['ext_dev'])
            leport = self.port_get(rdp, devname=dst_gateway['ext_dev'])
            remote_input_match = ofp_parser.OFPMatch(
                                    ip_proto=inet.IPPROTO_TCP,
                                    eth_dst=dst_gateway['ext_mac'],
                                    ipv4_src=src_gateway['ext_ip'],
                                    ipv4_dst=dst_gateway['ext_ip'])

            remote_output_actions = [ofp_set(eth_src=dst_gateway['ext_mac']),
                                     ofp_set(eth_dst=dst_gateway['idc_mac']),
                                     ofp_set(ipv4_src=dst_gateway['ext_ip']),
                                     ofp_set(ipv4_dst=src_gateway['ext_ip']),
                                     ofp_out(report)]

            local_output_actions = [ofp_set(eth_src=src_gateway['ext_mac']),
                                    ofp_set(eth_dst=src_gateway['idc_mac']),
                                    ofp_set(ipv4_src=src_gateway['ext_ip']),
                                    ofp_set(ipv4_dst=dst_gateway['ext_ip']),
                                    ofp_set(tcp_src=key),
                                    ofp_out(leport)]

            local_input_match = ofp_parser.OFPMatch(
                                    ip_proto=inet.IPPROTO_TCP,
                                    ipv4_src=dst_gateway['ext_ip'],
                                    ipv4_dst=src_gateway['ext_ip'],
                                    tcp_src=pkt_tp.dst_port,
                                    tcp_dst=key)

        self.send_msg_flow(rdp, remote_input_match, remote_input_actions, priority=20)
        self.send_msg_flow(rdp, remote_output_match, remote_output_actions, priority=20)
        self.send_msg_flow(dp, local_input_match, local_input_actions, priority=20)
        self.send_msg_flow(dp, local_output_match, local_output_actions, priority=20)


    def port_get(self, dp, id=None, devname=None):
        if devname is None:
            devname = 'tap%s' % id[:11]

        for port in self.ryuapp.port_state[dp.id].values():
            if port.name == devname:
                return port.port
        return None

    def ofp_get(self, dp):
        ofp = dp.ofproto
        ofp_parser = dp.ofproto_parser
        ofp_set = ofp_parser.OFPActionSetField
        ofp_out = ofp_parser.OFPActionOutput
        return (ofp, ofp_parser, ofp_set, ofp_out)

    def run(self, datapath, in_port, pkt_ether, pkt_ipv4, pkt_tp, **kwargs):
        ofp, ofp_parser, ofp_set, ofp_out = self.ofp_get(dp)

        LOG.debug("***************ipv4 start************")
        src_mac = pkt_ether.src_mac
        src_ip = pkt_ipv4.src
        dst_ip = pkt_ipv4.dst

        servers = self.db.server_get_by_mac(src_mac, dst_ip)
        src, dst, has_more = (servers['src'], servers['dst'], servers['has_more']

        if src is None or (dst is not None and not has_more):
            return False

        if dst is not None:
            src_gateway = self.db.gateway_get(src['host'])
            dst_gateway = self.db.gateway_get(dst['host'])
            if src['availability_zone'] == dst['availability_zone']:

                def same_host_flow(smac, dmac, sip, dip, id):
                    match = ofp_parser.OFPMatch(in_port=in_port,
                            eth_type=ether.ETH_TYPE_IP,
                            eth_src=smac,
                            ipv4_src=sip,
                            ipv4_dst=dip)
                    actions = [ofp_set(eth_dst=dmac),
                               ofp_out(self.port_get(datapath, id))]
                    self.send_msg_flow(datapath, match, actions, priority=2)

                def remote_host_flow(dport, iport, input=True):
                    dp = self.ryuapp.dps[dst_gateway['datapath_id']]
                    actions = [dp.ofproto_parser.OFPActionSetField(eth_src=dst_gateway['int_mac'])]
                    kwargs = {'eth_type': ether.ETH_TYPE_IP}
                    if input:
                        kwargs['in_port'] = iport
                        kwargs['eth_dst'] = dst['mac_address']
                        kwargs['ipv4_src'] = src['phy_ipv4']
                        kwargs['ipv4_dst'] = dst['phy_ipv4']
                        actions.append(dp.ofproto_parser.OFPActionSetField(ipv4_src=src['address']))
                        actions.append(dp.ofproto_parser.OFPActionSetField(ipv4_dst=dst['address']))
                        actions.append(dp.ofproto_parser.OFPActionOutput(dport))
                    else:
                        kwargs['in_port'] = dport
                        kwargs['eth_src'] = dst['mac_address']
                        kwargs['ipv4_src'] = dst['address']
                        kwargs['ipv4_dst'] = src['address']
                        actions.append(dp.ofproto_parser.OFPActionSetField(eth_dst=src_mac))
                        actions.append(dp.ofproto_parser.OFPActionSetField(ipv4_src=dst['phy_ipv4']))
                        actions.append(dp.ofproto_parser.OFPActionSetField(ipv4_dst=src['phy_ipv4']))
                        actions.append(dp.ofp_parser.OFPActionOutput(iport))
                        
                    match = dp.ofproto_parser.OFPMatch(**kwargs)
                    self.send_msg_flow(dp, match, actions, priority=2)

                def local_host_flow(iport, input=True):
                    actions = [ofp_set(eth_src=src_gateway['int_mac'])]
                    kwargs = {'eth_type' :ether.ETH_TYPE_IP}
                    if input:
                        kwargs['in_port'] = in_port
                        kwargs['eth_src'] = src_mac
                        kwargs['ipv4_src'] = src_ip
                        kwargs['ipv4_dst'] = dst_ip
                        actions.append(ofp_set(eth_dst=dst['mac_address'])
                        actions.append(ofp_set(ipv4_src=src_ip)
                        actions.append(ofp_set(ipv4_dst=dst_ip)
                        actions.append(ofp_out(iport))
                    else:
                        kwargs['in_port'] = iport
                        kwargs['eth_dst'] = src_mac
                        kwargs['ipv4_src'] = dst_ip
                        kwargs['ipv4_dst'] = src_ip
                        actions.append(ofp_set(ipv4_src=dst_ip)
                        actions.append(ofp_set(ipv4_dst=src_ip)
                        actions.append(ofp_out(in_port))

                    match = ofp_parser.OFPMatch(**kwargs)
                    self.send_msg_flow(dp, match, actions, priority=2)

                if src['host'] == dst['host']:
                    same_host_flow(src['mac_address'], dst['mac_address'],
                                   src['address'], dst['address'], dst['id'])
                    same_host_flow(dst['mac_address'], src['mac_address'],
                                   dst['address'], src['address'], src['id'])
                else:
                    rdp = self.ryuapp.dps[dst_gateway['datapath_id']]
                    dport = self.port_get(rdp, dst['id'])
                    iport = self.port_get(rdp, devname=dst_gateway['int_dev'])
                    remote_host_flow(dport, iport)
                    remote_host_flow(dport, iport, False)

                    lport = self.port_get(datapath, devname=src_gateway['int_dev'])
                    local_host_flow(lport)
                    local_host_flow(lport, False)
            else:
                key = utils.filter_port(pkt_ipv4.identification)
                if pkt_ipv4.proto == inet.IPPROTO_TCP:
                    self._rarefaction_tcp(datapath, pkt_ipv4, pkt_tp, in_port, key,
                                          src, src_gateway, dst, dst_gateway)
                elif pkt_ipv4.proto == inet.IPPROTO_UDP:
                    self._rarefaction_udp(datapath, pkt_ipv4, pkt_tp, in_port, key,
                                          src, src_gateway, dst, dst_gateway)
                else:
                    self._rarefaction_icmp(datapath, pkt_ipv4, pkt_tp, in_port, key,
                                           src, src_gateway, dst, dst_gateway)

            #actions = [ofp_parser.OFPActionSetField(eth_src=address),
            #           ofp_parser.OFPActionOutput(ofp.OFPP_IN_PORT)]
        else:
            match = ofp_parser.OFPMatch(
                in_port=in_port, eth_type=ether.ETH_TYPE_IP,
                eth_src=pkt_ether.dl_src, eth_dst=pkt_ether.dl_dst,
                ipv4_src=pkt_ipv4.src_ip, ipv4_dst=pkt_ipv4.dst_ip)

            gateway = self.db.gateway_get(src['fake_hostname'])

            if src['host'] != dst['fake_hostname']:
                actions = [ofp_set(eth_dst=gateway['gw_mac'],
                           ofp_set(ipv4_src=src['phy_ipv4']),
                           ofp_out(self.port_get(datapath, gateway['int_port']))] #int
            else:
                actions = [ofp_set(ipv4_src=src['phy_ipv4']),
                           ofp_out(self.port_get(datapath, gateway['gw_port']))] #gw

            self.send_msg_flow(datapath, match, actions)

    def send_msg_flow(self, datapath, match, actions, priority=None):
        inst = [datapath.ofp_parser.OFPInstructionActions(
                datapath.ofproto.OFPIT_APPLY_ACTIONS, actions)]
        mod = datapath.ofp_parser.OFPFlowMod(
                datapath=datapath, cookie=0,
                command=datapath.ofproto.OFPFC_ADD,
                idle_timeout=CONF.timeout,
                priority=priority or self.priority,
                flags=datapath.ofproto.OFPFF_SEND_FLOW_REM,
                match=match, instructions=inst)
        datapath.send_msg(mod)
