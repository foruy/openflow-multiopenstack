from proxyclient import base

class Token(base.Resource):
    def __repr__(self):
        return "<Token: %s>" % self.name

class TokenManager(base.Manager):
    resource_class = Token

    def authenticate(self, username=None, password=None, token=None):
        if token:
            params = {"auth": {"token": {"id": token}}}
        elif username and password:
            params = {"auth": {"passwordCredentials": {"username": username,
                                                       "password": password}}}
        else:
            raise ValueError('A username and password or token is required.')
        token_ref = self._create('/', params, "user", return_raw=True)
        return token_ref

    def delete(self, token=None):
        return self._delete('/%s' % base.getid(token))
