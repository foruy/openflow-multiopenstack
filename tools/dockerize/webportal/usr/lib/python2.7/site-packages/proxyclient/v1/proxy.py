from six.moves.urllib import parse

from proxyclient import base

class Proxy(base.Resource):
    pass

class ProxyManager(base.Manager):
    resource_class = Proxy

    def availability_zone_list(self, user_id=None):
        query_string = "?user_id=%s" % user_id if user_id else ""
        return self._list('/os-availability-zone%s' % query_string, 'avail_zones')

    def availability_zone_get(self, id):
        return self._get('/os-availability-zone/%s' % id, 'avail_zone')

    def authenticate(self, username, password, **kwargs):
        body = {"auth": {"username": username, "password": password},
                "kwargs": kwargs}
        return self._create('/authenticate', body, 'user')

    def authenticate_by_zone(self, user_id, zone_id):
        body = {"zone_id": zone_id}
        return self._update('/authenticate/%s' % user_id, body)

    # proxy
    def authenticate_by_zone_proxy(self, user_id, zone_id):
        body = {"zone_id": zone_id}
        return self._update('/os-proxy/authenticate/%s' % user_id, body)

    def logout(self, id):
        body = {'user_id': id}
        return self._delete('/logout/%s'% id)

    def flavor_list(self, zone_id):
        return self._list('/os-flavor/%s' % zone_id, 'flavors')

    def image_list_detailed(self, zone_id, **kwargs):
        filters = kwargs.get('filters', {})
        query_string = "?%s" % parse.urlencode(filters) if filters else ""
        return self._list('/os-image/%s%s' % (zone_id, query_string),
                          'images')

    def project_absolute_limits(self, user_id, zone_id):
        return self._get('/users/%s/limits/%s' % (user_id, zone_id), 'limits')

    def user_absolute_limits(self, user_id):
        return self._get('/users/%s/limits' % user_id, 'limits')

    def server_get(self, instance_id):
        return self._get('/servers/%s' % instance_id, 'server')

    def server_list(self, userid, **kwargs):
        detail = ""
        if kwargs.get('all_tenants'):
            detail = "/detail"
        return self._list('/servers/user/%s%s' % (userid, detail), 'servers')

    def server_delete(self, user_id, instance_id):
        self._delete('/servers/%s/user/%s' % (instance_id, user_id))

    # proxy
    def server_delete_proxy(self, user_id, instance_id):
        self._delete('/os-proxy/servers/%s/user/%s' % (instance_id, user_id))

    def server_start(self, instance_id):
        body = {'action': 'start'}
        return self._update('/servers/%s/action' % instance_id, body)

    def server_stop(self, instance_id):
        body = {'action': 'stop'}
        return self._update('/servers/%s/action' % instance_id, body)

    # proxy
    def server_action_proxy(self, instance_id, **kwargs):
        body = {'action': kwargs['action']}
        return self._update('/os-proxy/servers/%s/action' % instance_id, body)

    def server_create(self, user_id, name, image, flavor, zone_id=None, **kwargs):
        body = {"server": {"name": name, "image": image, "flavor": flavor}}
        kwargs.setdefault('zone_id', zone_id)
        body["kwargs"] = kwargs
        return self._create('/servers/create/%s' % user_id, body, 'server')

    # proxy
    def server_create_proxy(self, user_id, base, server, kwargs):
        body = {"base": base, "server": server, "kwargs": kwargs}
        return self._create('/os-proxy/servers/create/%s' % user_id, body, 'server')

    def firewall_get(self, instance_id):
        return self._list('/firewalls/%s' % instance_id, 'firewall')

    def firewall_delete(self, firewall_id):
        self._delete('/firewalls/%s' % firewall_id)

    def firewall_create(self, **kwargs):
        body = {"firewall": kwargs}
        return self._create('/firewalls', body, 'firewall')

    def firewall_exist(self, instance_id, **kwargs):
        body = {"firewall": kwargs}
        return self.api.client.post('/firewalls/%s/action' % instance_id, body=body)[1]['firewall']

    def gateway_list(self):
        return self._list('/gateways', 'gateways')

    def gateway_get(self, id):
        return self._get('/gateways/%s' % id, 'gateway')

    def gateway_get_by_instance(self, instance_id):
        return self._list('/os-gateway/instance/%s' % instance_id, 'gateways')

    #def gateway_update(self, instance_id, old_gateway, gateway):
    #    body = {"gateway": {"old_gateway": old_gateway, "new_gateway": gateway}}
    #    return self._update('/gateways/%s' % instance_id, body, 'gateway')

    def gateway_update(self, id, **kwargs):
        body = {"gateway": kwargs}
        return self._update('/gateways/%s' % id, body)

    def security_group_list(self, user_id, search_opts=None):
        """Get list of servers."""
        if search_opts is None:
            search_opts = {}

        qparams = {}
        for opt, val in search_opts.iteritems():
            if val: qparams[opt] = val

        query_string = "?%s" % parse.urlencode(qparams) if qparams else ""
        return self._get('/security_groups/%s%s' % (user_id,
            query_string), 'security_groups')

    def security_group_update(self, user_id, **kwargs):
        body = {'security_group': kwargs}
        return self._update('/security_groups/%s' % user_id, body)

    def user_list(self, user_id):
        return self._list('/users/user/%s/detail' % user_id, 'users')

    def user_get(self, user_id):
        return self._get('/users/user/%s' % user_id, 'user')

    def register(self, **kwargs):
        body = {"auth": kwargs}
        return self._create('/users/register', body, 'auth')

    # proxy
    def register_proxy(self, zone, auth):
        body = {"zone": zone, "auth": auth}
        return self._create('/os-proxy/users/register', body, 'auth')

    def check_data(self, key, val):
        body = {"check": {key: val}}
        return self._update('/users/check', body)

    def user_login_get(self, id):
        return self._list('/users/login/%s/detail' % id, 'user')

    def user_login_list(self, id):
        return self._list('/users/login/%s/list' % id, 'user')

    def server_network(self, user_id, **kwargs):
        body = {"network": kwargs}
        return self._update('/servers/os-network/%s' % user_id, body)

    def image_get(self, zone):
        return self._list('/os-image/zone/%s' % zone, 'images')

    def image_list(self):
        return self._list('/os-image', 'images')

    def image_delete(self, image_id):
        return self._delete('/os-image/%s' % image_id)

    def image_rebuild(self, user_id, zone):
        body = {"user_id": user_id, "zone": zone}
        return self._update('/os-image', body)

    # proxy
    def image_rebuild_proxy(self, body):
        return self._update('/os-proxy/os-image', body)

    def zone_create(self, user_id, **kwargs):
        body = {"user_id": user_id, "zone": kwargs}
        return self._create('/os-zone', body, 'zone')

    # proxy
    def zone_create_proxy(self, body):
        return self._create('/os-proxy/os-zone', body, 'zone')

    def zone_delete(self, zone_id):
        self._delete('/os-zone/%s' % zone_id)

    def flavor_get_by_zone(self, zone_id):
        return self._list('/os-flavor/zone/%s' % zone_id, 'flavors')

    def flavor_delete(self, flavor_id):
        return self._delete('/os-flavor/%s' % flavor_id)

    def flavor_rebuild(self, user_id, zone):
        body = {"user_id": user_id, "zone": zone}
        return self._update('/os-flavor', body)

    # proxy
    def flavor_rebuild_proxy(self, body):
        return self._update('/os-proxy/os-flavor', body)

    def gateway_get_by_zone(self, zone_id):
        return self._list('/os-gateway/zone/%s' % zone_id, 'gateways')

    def gateway_create(self, zone, **kwargs):
        body = {'gateway': kwargs}
        return self._create('/os-gateway/%s' % zone, body, 'gateway')

    def gateway_delete(self, gateway_id):
        return self._delete('/os-gateway/%s' % gateway_id)

    def gateway_rebuild(self, user_id, zone):
        body = {"user_id": user_id, "zone": zone}
        return self._update('/os-gateway', body)

    # proxy
    def gateway_rebuild_proxy(self, body):
        return self._update('/os-proxy/os-gateway', body)

    # Deprecated
    def get_last_network_type(self, user_id):
        return self._get('/os-network/%s' % user_id, 'netype')

    def network_list(self):
        return self._list('/networks', 'networks')

    def network_get_by_zone(self, zone_id):
        return self._list('/os-network/zone/%s' % zone_id, 'networks')

    def network_rebuild(self, user_id, zone):
        body = {"user_id": user_id, "zone": zone}
        return self._update('/os-network', body)

    # proxy
    def network_rebuild_proxy(self, body):
        return self._update('/os-proxy/os-network', body)

    def network_delete(self, id):
        self._delete('/os-network/%s' % id)

    def network_type_list(self):
        return self._list('/os-network-type', 'networks')

    def network_type_delete(self, id):
        self._delete('/os-network-type/%s' % id)

    def resource_list(self, user_id):
        return self._list('/resource/%s' % user_id, 'resources')

    def resource_get(self, user_id, filters=None):
        if filters is None:
            filters = {}

        qparams = {}
        for opt, val in filters.iteritems():
            if val: qparams[opt] = val

        query_string = "?%s" % parse.urlencode(qparams) if qparams else ""
        return self._list('/resource/user/%s%s' % (
                user_id, query_string), 'resources')

    def user_get_by_time(self, user_id, **filters):
        qparams = {}
        for opt, val in filters.iteritems():
            if val: qparams[opt] = val
        query_string = "?%s" % parse.urlencode(qparams) if qparams else ""
        return self._list('/users/statistic/%s%s' % (
            user_id, query_string), 'users')

    def validate_user(self, **kwargs):
        body = {'user': dict((k, v) for k, v in kwargs.items() if v)}
        return self._update('/os-password', body)

    def update_user_key(self, username, email, **kwargs):
        body = {'user': {'base': {'username': username, 'email': email}}}
        body['user']['kwargs'] = kwargs
        return self._update('/os-password/userkey', body)

    def getpassword(self, id, username, email, **kwargs):
        body = {'user': {'base': {'uuid': id, 'username': username, 'email': email}}}
        body['user']['kwargs'] = kwargs
        return self._update('/os-password/getpassword', body)

    def resetpassword(self, id, username, email, **kwargs):
        body = {'user': {'base': {'uuid': id, 'username': username, 'email': email}}}
        body['user']['kwargs'] = kwargs
        return self._update('/os-password/resetpassword', body)

    # proxy
    def resetpassword_proxy(self, keystone_user_id, password, zone):
        body = {'auth': {'keystone_user_id': keystone_user_id,
                         'password': password},
                'zone': zone}
        return self._update('/os-proxy/os-password/resetpassword', body)

    def user_delete(self, id, user_id):
        self._delete('/users/%s/%s' % (id, user_id))

    def get_monitor(self, instance):
        return self._get('/os-monitor/%s' % base.getid(instance), 'monitor')

    def device_get(self, gateway_id):
        return self._get('/os-gateway/%s/device' % gateway_id, 'device')
