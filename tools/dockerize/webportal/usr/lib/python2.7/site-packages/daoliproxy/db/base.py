"""Base class for classes that need modular database access."""

import collections
from webob import exc
from oslo.config import cfg

from daoliproxy import utils
from daoliproxy.openstack.common import timeutils
from daoliproxy.openstack.common import importutils
from daoliproxy.openstack.common.memorycache import get_client

db_driver_opt = cfg.StrOpt('db_driver',
                           default='daoliproxy.db',
                           help='The driver to use for database access')

CONF = cfg.CONF
CONF.register_opt(db_driver_opt)
CONF.register_opt(cfg.IntOpt('auth_expires', default=3600))


class Base(object):
    """DB driver is injected in the init method."""
    def __init__(self, **kwargs):
        db_driver = kwargs.get('db_driver')
        if not db_driver:
            db_driver = CONF.db_driver
        self.db = importutils.import_module(db_driver)
        self.cache_db = MDB
        super(Base, self).__init__()

class MemDB(object):
    def __init__(self, *args, **kwargs):
        self.client = get_client()
        self.user_map = collections.defaultdict(dict)
        self.project_map = {}

    def get(self, key):
        return self.client.get(str(key))

    def set(self, key, value, timeout=None):
        return self.client.set(str(key), value, timeout or CONF.auth_expires)

    def delete(self, key):
        self.client.delete(str(key))

    def user_load(self):
        users = self.get('users')
        if users is not None:
            self.delete('users')
            self.user_map = users['user']
            self.project_map = users['project']

    def user_save(self):
        self.delete('users')
        self.set('users', {'user': self.user_map, 'project': self.project_map})

    def user_reset(self, user):
        if not self.user_map.has_key(user):
            self.user_map[user] = {}
        self.user_map[user]['time'] = timeutils.utcnow()
        self.user_map[user]['zone'] = set()

    def user_update(self, user, zone):
        if not self.user_map.has_key(user):
            self.user_reset(user)
        self.user_map[user]['zone'].add(zone)

    def user_get(self, user):
        if not self.user_map.has_key(user):
            raise exc.HTTPUnauthorized("The user is already expires.")
        return self.user_map[user]['zone']

    def user_clear(self, user):
        self.user_map.pop(user, None)

    def project_update(self, project, token):
        #self.set(project, token)
        self.project_map[project] = token

    def project_get(self, project):
        #token = self.get(project)
        #if token is None:
        #    raise exc.HTTPUnauthorized("The project is already expires.")
        #return token
        if not self.project_map.has_key(project):
            raise exc.HTTPUnauthorized("The project is already expires.")
        return self.project_map[project]

class DBFactory(MemDB):
    _instance = None

    def __new__(cls, *args, **kwargs):
        if not cls._instance:
            cls._instance = super(MemDB, cls).__new__(cls, *args, **kwargs)
        return cls._instance

MDB = DBFactory()
