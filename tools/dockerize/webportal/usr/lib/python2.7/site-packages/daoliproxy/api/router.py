import daoliproxy.api.openstack
from daoliproxy.api import servers
from daoliproxy.api import extensions


class APIRouter(daoliproxy.api.openstack.APIRouter):
    """Routes requests on the OpenStack API to the appropriate controller
    and method.
    """
    ExtensionManager = extensions.ExtensionManager

    def __init__(self, ext_mgr=None):
        super(APIRouter, self).__init__(ext_mgr=ext_mgr)

    def _setup_routes(self, mapper, ext_mgr):
        mapper.redirect("", "/")

        server_controller = servers.create_resource()
        mapper.connect("/authenticate",
                       controller=server_controller,
                       action='authenticate',
                       conditions={"method": ['POST']})

        mapper.connect("/authenticate/{userid}",
                       controller=server_controller,
                       action='authenticate_by_zone',
                       conditions={"method": ['PUT']})

        # proxy
        mapper.connect("/os-proxy/authenticate/{userid}",
                       controller=server_controller,
                       action='authenticate_by_zone_proxy',
                       conditions={"method": ['PUT']})

        mapper.connect("/logout/{userid}",
                       controller=server_controller,
                       action='logout',
                       conditions={"method": ['DELETE']})

        mapper.connect("/os-availability-zone",
                        controller=server_controller,
                        action='availability_zone_list',
                        conditions={"method": ['GET']})

        mapper.connect("/os-availability-zone/{id}",
                        controller=server_controller,
                        action='availability_zone_get',
                        conditions={"method": ['GET']})

        mapper.connect("/os-flavor/{zid}",
                        controller=server_controller,
                        action='flavor_list',
                        conditions={"method": ['GET']})

        mapper.connect("/os-image/{zid}",
                        controller=server_controller,
                        action='image_list_detailed',
                        conditions={"method": ['GET']})

        mapper.connect("/servers/user/{userid}",
                        controller=server_controller,
                        action='server_list',
                        conditions={"method": ['GET']})

        mapper.connect("/servers/user/{userid}/detail",
                        controller=server_controller,
                        action='server_detail',
                        conditions={"method": ['GET']})

        mapper.connect("/servers/{id}",
                       controller=server_controller,
                       action='server_get',
                       conditions={"method": ['GET']})

        mapper.connect("/servers/create/{userid}",
                       controller=server_controller,
                       action='server_create',
                       conditions={"method": ['POST']})

        # proxy
        mapper.connect("/os-proxy/servers/create/{userid}",
                       controller=server_controller,
                       action='server_create_proxy',
                       conditions={"method": ['POST']})

        mapper.connect("/servers/{id}/user/{userid}",
                       controller=server_controller,
                       action='server_delete',
                       conditions={"method": ['DELETE']})

        # proxy
        mapper.connect("/os-proxy/servers/{id}/user/{userid}",
                       controller=server_controller,
                       action='server_delete_proxy',
                       conditions={"method": ['DELETE']})

        mapper.connect("/servers/{id}/action",
                       controller=server_controller,
                       action='server_action',
                       conditions={"method": ['PUT']})

        # proxy
        mapper.connect("/os-proxy/servers/{id}/action",
                       controller=server_controller,
                       action='server_action_proxy',
                       conditions={"method": ['PUT']})

        mapper.connect("/firewalls/{id}",
                       controller=server_controller,
                       action='firewall_get',
                       conditions={"method": ['GET']})

        mapper.connect("/firewalls/{fid}",
                       controller=server_controller,
                       action='firewall_delete',
                       conditions={"method": ['DELETE']})

        mapper.connect("/firewalls",
                       controller=server_controller,
                       action='firewall_create',
                       conditions={"method": ['POST']})

        mapper.connect("/firewalls/{id}/action",
                       controller=server_controller,
                       action='firewall_exist',
                       conditions={"method": ['POST']})

        mapper.connect("/gateways",
                       controller=server_controller,
                       action='gateway_list',
                       conditions={"method": ['GET']})

        mapper.connect("/gateways/{id}",
                       controller=server_controller,
                       action='gateway_get_by_id',
                       conditions={"method": ['GET']})

        mapper.connect("/gateways/{id}",
                       controller=server_controller,
                       action='gateway_update',
                       conditions={"method": ['PUT']})

        mapper.connect("/security_groups/{id}",
                        controller=server_controller,
                        action='security_group_list',
                        conditions={"method": ['GET']})

        mapper.connect("/security_groups/{id}",
                        controller=server_controller,
                        action='security_group_update',
                        conditions={"method": ['PUT']})

        mapper.connect("/users/user/{id}/detail",
                        controller=server_controller,
                        action='user_list',
                        conditions={"method": ['GET']})

        mapper.connect("/users/user/{id}",
                        controller=server_controller,
                        action='user_get',
                        conditions={"method": ['GET']})

        # Exchange instance info
        mapper.connect("/servers/compute/{project}",
                        controller=server_controller,
                        action='server_get_by_key',
                        conditions={"method": ['POST']})

        mapper.connect("/servers/compute/{sid}/{did}",
                        controller=server_controller,
                        action='server_get_by_id',
                        conditions={"method": ['GET']})

        mapper.connect("/users/register",
                       controller=server_controller,
                       action='register',
                       conditions={"method": ['POST']})

        mapper.connect("/os-proxy/users/register",
                       controller=server_controller,
                       action='register_proxy',
                       conditions={"method": ['POST']})

        mapper.connect("/users/check",
                       controller=server_controller,
                       action='checkdata',
                       conditions={"method": ['PUT']})

        mapper.connect("/users/{userid}/limits/{id}",
                       controller=server_controller,
                       action='project_absolute_limits',
                       conditions={"method": ['GET']})

        mapper.connect("/users/{userid}/limits",
                       controller=server_controller,
                       action='user_absolute_limits',
                       conditions={"method": ['GET']})

        mapper.connect("/users/login/{id}/list",
                       controller=server_controller,
                       action='user_login_list',
                       conditions={"method": ['GET']})

        mapper.connect("/users/login/{id}/detail",
                       controller=server_controller,
                       action='user_login_detail',
                       conditions={"method": ['GET']})

        mapper.connect("/servers/os-network/{id}",
                       controller=server_controller,
                       action='server_network',
                       conditions={"method": ['PUT']})

        mapper.connect("/os-image/zone/{id}",
                       controller=server_controller,
                       action='image_get',
                       conditions={"method": ['GET']})

        mapper.connect("/os-image",
                       controller=server_controller,
                       action='image_list',
                       conditions={"method": ['GET']})

        mapper.connect("/os-image/{id}",
                       controller=server_controller,
                       action='image_delete',
                       conditions={"method": ['DELETE']})

        mapper.connect("/os-image",
                       controller=server_controller,
                       action='image_rebuild',
                       conditions={"method": ['PUT']})

        # proxy
        mapper.connect("/os-proxy/os-image",
                       controller=server_controller,
                       action='image_rebuild_proxy',
                       conditions={"method": ['PUT']})

        mapper.connect("/os-zone",
                       controller=server_controller,
                       action='zone_create',
                       conditions={"method": ['POST']})

        # proxy
        mapper.connect("/os-proxy/os-zone",
                       controller=server_controller,
                       action='zone_create_proxy',
                       conditions={"method": ['POST']})

        mapper.connect("/os-zone/{id}",
                       controller=server_controller,
                       action='zone_delete',
                       conditions={"method": ['DELETE']})

        mapper.connect("/os-flavor/zone/{id}",
                       controller=server_controller,
                       action='flavor_get_by_zone',
                       conditions={"method": ['GET']})

        mapper.connect("/os-flavor/{id}",
                       controller=server_controller,
                       action='flavor_delete',
                       conditions={"method": ['DELETE']})

        mapper.connect("/os-flavor",
                       controller=server_controller,
                       action='flavor_rebuild',
                       conditions={"method": ['PUT']})

        # proxy
        mapper.connect("/os-proxy/os-flavor",
                       controller=server_controller,
                       action='flavor_rebuild_proxy',
                       conditions={"method": ['PUT']})

        mapper.connect("/os-gateway",
                       controller=server_controller,
                       action='gateway_get',
                       conditions={"method": ['POST']})

        mapper.connect("/os-gateway/zone/{id}",
                       controller=server_controller,
                       action='gateway_get_by_zone',
                       conditions={"method": ['GET']})

        mapper.connect("/os-gateway/instance/{id}",
                       controller=server_controller,
                       action='gateway_get_by_instance',
                       conditions={"method": ['GET']})

        mapper.connect("/os-gateway/{id}",
                       controller=server_controller,
                       action='gateway_delete',
                       conditions={"method": ['DELETE']})

        mapper.connect("/os-gateway",
                       controller=server_controller,
                       action='gateway_rebuild',
                       conditions={"method": ['PUT']})

        # proxy
        mapper.connect("/os-proxy/os-gateway",
                       controller=server_controller,
                       action='gateway_rebuild_proxy',
                       conditions={"method": ['PUT']})

        mapper.connect("/os-gateway/{zone}",
                       controller=server_controller,
                       action='gateway_create',
                       conditions={"method": ['POST']})

        mapper.connect("/os-gateway/{id}/device",
                       controller=server_controller,
                       action='device_get',
                       conditions={"method": ['GET']})

        mapper.connect("/os-ext-gateway",
                       controller=server_controller,
                       action='service_create',
                       conditions={"method": ['POST']})

        # Deprecated
        mapper.connect("/os-network/{id}",
                       controller=server_controller,
                       action='get_last_network_type',
                       conditions={"method": ['GET']})

        mapper.connect("/networks",
                       controller=server_controller,
                       action='network_list',
                       conditions={"method": ['GET']})

        mapper.connect("/os-network/zone/{id}",
                       controller=server_controller,
                       action='network_get_by_zone',
                       conditions={"method": ['GET']})

        mapper.connect("/os-network",
                       controller=server_controller,
                       action='network_rebuild',
                       conditions={"method": ['PUT']})

        mapper.connect("/os-network/{id}",
                       controller=server_controller,
                       action='network_delete',
                       conditions={"method": ['DELETE']})

        # proxy
        mapper.connect("/os-proxy/os-network",
                       controller=server_controller,
                       action='network_rebuild_proxy',
                       conditions={"method": ['PUT']})

        mapper.connect("/os-network-type",
                       controller=server_controller,
                       action='network_type_list',
                       conditions={"method": ['GET']})

        mapper.connect("/os-network-type/{id}",
                       controller=server_controller,
                       action='network_type_delete',
                       conditions={"method": ['DELETE']})

        mapper.connect("/resource/{id}",
                       controller=server_controller,
                       action='resource_list',
                       conditions={"method": ['GET']})

        mapper.connect("/resource/user/{id}",
                       controller=server_controller,
                       action='resource_get',
                       conditions={"method": ['GET']})

        mapper.connect("/users/statistic/{id}",
                       controller=server_controller,
                       action='user_get_by_time',
                       conditions={"method": ['GET']})

        mapper.connect("/os-password",
                       controller=server_controller,
                       action='validate_user',
                       conditions={"method": ['PUT']})

        mapper.connect("/os-password/userkey",
                       controller=server_controller,
                       action='update_user_key',
                       conditions={"method": ['PUT']})

        mapper.connect("/os-password/getpassword",
                       controller=server_controller,
                       action='getpassword',
                       conditions={"method": ['PUT']})

        mapper.connect("/os-password/resetpassword",
                       controller=server_controller,
                       action='resetpassword',
                       conditions={"method": ['PUT']})

        mapper.connect("/os-proxy/os-password/resetpassword",
                       controller=server_controller,
                       action='resetpassword_proxy',
                       conditions={"method": ['PUT']})

        # Delete user
        mapper.connect("/users/{id}/{userid}",
                       controller=server_controller,
                       action='user_delete',
                       conditions={"method": ['DELETE']})

        mapper.connect("/os-monitor/{id}",
                       controller=server_controller,
                       action='monitor',
                       conditions={"method": ['GET']})
