from oslo.config import cfg

from proxyclient.v1 import client as proxy_client

CONF = cfg.CONF

def proxyclient(request):
    conn = proxy_client.Client(http_log_debug=CONF.debug)
    conn.set_management_url(request.url)
    return conn

def _proxy(request):
    return proxyclient(request).proxy

def authenticate_by_zone_proxy(request, user_id, zone_id):
    return _proxy(request).authenticate_by_zone_proxy(user_id, zone_id)

def server_create_proxy(request, user_id, base, server, kwargs):
    return _proxy(request).server_create_proxy(user_id, base, server, kwargs)

def server_delete_proxy(request, user_id, instance_id):
    _proxy(request).server_delete_proxy(user_id, instance_id)

def server_action_proxy(request, instance_id, **kwargs):
    _proxy(request).server_action_proxy(instance_id, **kwargs)

def register_proxy(request, zone, auth):
    return _proxy(request).register_proxy(zone, auth)

def user_update_password_proxy(request, keystone_user_id, password, zone):
    return _proxy(request).user_update_password_proxy(keystone_user_id, password, zone)

def zone_create_proxy(request, body):
    return _proxy(request).zone_create_proxy(body)

def image_rebuild_proxy(request, body):
    return _proxy(request).image_rebuild_proxy(body)

def flavor_rebuild_proxy(request, body):
    return _proxy(request).flavor_rebuild_proxy(body)

def gateway_rebuild_proxy(request, body):
    return _proxy(request).gateway_rebuild_proxy(body)

def network_rebuild_proxy(request, body):
    return _proxy(request).network_rebuild_proxy(body)
