import functools

from daoliproxy.db.base import MDB as cache

def dbcache(func):
    @functools.wraps(func)
    def wrapped(*args, **kwargs):
        if len(args) > 0:
            key = '_'.join([func.__name__, '_'.join(map(str, args))])
        else:
            key = func.__name__
        value = cache.get(key)
        if value is None:
            value = func(*args, **kwargs)
            cache.set(key, value)
        return value
    return wrapped

def dbcache_remove(*keys):
    def wrapped_out(func):
        def wrapped(*args, **kwargs):
            f = func(*args, **kwargs)
            for ks in keys:
                if len(args) > 0 and not ks.endswith('_get_all'):
                    key = '_'.join([ks, args[0]])
                else:
                    key = ks
                cache.delete(key)
            return f
        return wrapped
    return wrapped_out
