"""Base class for classes that need modular database access."""

import threading
lock = threading.RLock()

import collections
from webob import exc
from oslo.config import cfg

from daoliproxy import utils
from daoliproxy.openstack.common import importutils
from daoliproxy.openstack.common.memorycache import get_client

db_driver_opt = cfg.StrOpt('db_driver',
                           default='daoliproxy.db',
                           help='The driver to use for database access')

CONF = cfg.CONF
CONF.register_opt(db_driver_opt)
CONF.register_opt(cfg.IntOpt('auth_expires', default=12000))


class Base(object):
    """DB driver is injected in the init method."""
    def __init__(self, **kwargs):
        db_driver = kwargs.get('db_driver')
        if not db_driver:
            db_driver = CONF.db_driver
        self.db = importutils.import_module(db_driver)
        self.cache_db = MDB
        super(Base, self).__init__()

class MemDB(object):
    def __init__(self, *args, **kwargs):
        self.client = get_client()
        self.zone_map = {}

    def get(self, key):
        return self.client.get(str(key))

    def set(self, key, value, timeout=None):
        return self.client.set(str(key), value, timeout or CONF.auth_expires)

    def delete(self, key):
        self.client.delete(str(key))

    def user_load(self):
        self.zone_map = self.get('users') or {}
        print '###user_load###', self.get('users')

    def user_save(self):
        print '###user_save###', self.zone_map
        self.set('users', self.zone_map)
        print self.get('users')

    def user_reset(self, user):
        #self.set(user, set())
        #self.set(user, [])
        self.zone_map[user] = set()

    def user_update(self, user, zone):
        #zones = self.user_get(user)
        #zones.add(zone)
        #zones.append(zone)
        #self.set(user, zones)
        #zones[zone] = True
        self.zone_map[user].add(zone)

    def user_get(self, user):
        #zones = self.get(user)
        #if zones is None:
        #    raise exc.HTTPUnauthorized("The user is already expires.")
        #return zones
        return self.zone_map.get(user, [])

    def user_clear(self, user):
        self.delete(user)

    def project_update(self, project, token):
        self.set(project, token)

    def project_get(self, project):
        token = self.get(project)
        if token is None:
            raise exc.HTTPUnauthorized("The project is already expires.")
        return token

class DBFactory(MemDB):
    _instance = None

    def __new__(cls, *args, **kwargs):
        if not cls._instance:
            cls._instance = super(MemDB, cls).__new__(cls, *args, **kwargs)
        return cls._instance

MDB = DBFactory()
