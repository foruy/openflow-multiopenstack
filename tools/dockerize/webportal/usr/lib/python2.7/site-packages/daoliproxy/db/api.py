from oslo.config import cfg
from oslo.db import concurrency

from daoliproxy.i18n import _
from daoliproxy.db import wrapper
from daoliproxy.openstack.common import log as logging

CONF = cfg.CONF

_BACKEND_MAPPING = {'sqlalchemy': 'daoliproxy.db.sqlalchemy.api'}

IMPL = concurrency.TpoolDbapiWrapper(CONF, backend_mapping=_BACKEND_MAPPING)

LOG = logging.getLogger(__name__)

def authenticate(username, password, **kwargs):
    return IMPL.authenticate(username, password, **kwargs)

def user_get_all():
    """Get all user."""
    return IMPL.user_get_all()

#@wrapper.dbcache
def zone_get(id):
    return IMPL.zone_get(id)

#@wrapper.dbcache
def zone_get_all():
    return IMPL.zone_get_all()

def zone_get_by_image(image_id, zones):
    return IMPL.zone_get_by_image(image_id, zones)

def project_absolute_limits(project_id):
    return IMPL.project_absolute_limits(project_id)

def user_absolute_limits(user_id):
    return IMPL.user_absolute_limits(user_id)

#@wrapper.dbcache
def user_project_get_by_user(user_id):
    return IMPL.user_project_get_by_user(user_id)

#@wrapper.dbcache
def user_project_get_by_id(user_id, zone_id):
    return IMPL.user_project_get_by_id(user_id, zone_id)

def flavor_get_all(zone=None):
    return IMPL.flavor_get_all(zone=zone)

#@wrapper.dbcache
def flavor_get(id):
    return IMPL.flavor_get(id)

def image_get_all(zone=None):
    return IMPL.image_get_all(zone=zone)

#@wrapper.dbcache
def image_get(id):
    return IMPL.image_get(id)

def server_get_all(user_id=None):
    """Get all instance."""
    return IMPL.server_get_all(user_id=user_id)

#@wrapper.dbcache
def server_get(id):
    return IMPL.server_get(id)

def server_get_by_zone(zone_id):
    return IMPL.server_get_by_zone(zone_id)

def security_group_get_by_user(user_id):
    return IMPL.security_group_get_by_user(user_id)

def gateway_get_all(zone=None):
    return IMPL.gateway_get_all(zone=zone)

def gateway_get(id):
    return IMPL.gateway_get(id)

def gateway_get_by_idc(idc_id):
    return IMPL.gateway_get_by_idc(idc_id)

#@wrapper.dbcache
def gateway_get_by_name(hostname):
    return IMPL.gateway_get_by_name(hostname)

def generate_ip(user_id, net_type):
    return IMPL.generate_ip(user_id, net_type)

def server_get_by_key(instance_id, address):
    return IMPL.server_get_by_key(instance_id, address)

###################

def user_project_all():
    return IMPL.user_project_all()

def user_project_delete(zone_id):
    return IMPL.user_project_delete(zone_id)

def user_project_create(user_id, project_id, keystone_user_id,
            zone_id, total_instances=None):
    return IMPL.user_project_create(user_id, project_id, keystone_user_id,
            zone_id, total_instances=total_instances)

def user_info_get(user_id, username):
    return IMPL.user_info_get(user_id, username)

#@wrapper.dbcache_remove('server_get')
def server_delete(instance_id):
    return IMPL.server_delete(instance_id)

def server_create(values):
    return IMPL.server_create(values)

#@wrapper.dbcache_remove('server_get')
def server_update(instance_id, values):
    return IMPL.server_update(instance_id, values)

def firewall_delete(firewall_id):
    IMPL.firewall_delete(firewall_id)

def firewall_get_by_instance(instance_id):
    return IMPL.firewall_get_by_instance(instance_id)

def firewall_create(firewall):
    return IMPL.firewall_create(firewall)

def firewall_get(id=None, hostname=None, gateway_port=None):
    return IMPL.firewall_get(id=id, hostname=hostname, gateway_port=gateway_port)

def security_group_get_all():
    return IMPL.security_group_get_all()

def security_group_create(user_id, top, bot):
    return IMPL.security_group_create(user_id, top, bot)

def security_group_delete(user_id, top, bot):
    return IMPL.security_group_delete(user_id, top, bot)

def gateway_count(user_id):
    return IMPL.gateway_count(user_id)

def user_by_project_list():
    return IMPL.user_by_project_list()

#@wrapper.dbcache
def user_get(user_id):
    return IMPL.user_get(user_id)

def register(**values):
    return IMPL.register(**values)

def checkdata(key, val):
    return IMPL.checkdata(key, val)

def user_task(utype, uobj):
    return IMPL.user_task(utype, uobj)

def user_login_list(user_id=None):
    return IMPL.user_login_list(user_id=user_id)

def image_create(zone, values):
    return IMPL.image_create(zone, values)

def image_delete(id=None, zone=None): #n
    IMPL.image_delete(id=id, zone=zone)

def network_get_by_project(user_id, address):
    return IMPL.network_get_by_project(user_id, address)

#@wrapper.dbcache_remove('zone_get_all')
def zone_create(values):
    return IMPL.zone_create(values)

#@wrapper.dbcache_remove('zone_get', 'zone_get_all')
def zone_delete(id):
    IMPL.zone_delete(id)

#@wrapper.dbcache_remove('zone_get', 'zone_get_all')
def zone_update(id, values):
    return IMPL.zone_update(id, values)

def zone_exists(auth_url=None):
    return IMPL.zone_exists(auth_url=auth_url)

def flavor_create(zone, values):
    return IMPL.flavor_create(zone, values)

def flavor_delete(id=None, zone=None):
    IMPL.flavor_delete(id=id, zone=zone)

def gateway_create(zone, values):
    return IMPL.gateway_create(zone, values)

def gateway_delete(id=None, zone=None):
    IMPL.gateway_delete(id=id, zone=zone)

def gateway_update(hostname, **value):
    return IMPL.gateway_update(hostname, **value)

def notify_about_resource(source_name, source_id, action,
                          project_id, user_id, extra=None):
    IMPL.notify_about_resource(source_name, source_id, action,
                               project_id, user_id, extra=extra)

def resource_get(source_id=None, source_name=None, action=None, project_id=None, user_id=None):
    return IMPL.resource_get(source_id=source_id, source_name=source_name,
                             action=action, project_id=project_id, user_id=user_id)

def user_project_get_by_user(user_id):
    return IMPL.user_project_get_by_user(user_id)

def security_group_get_by_user(user_id):
    return IMPL.security_group_get_by_user(user_id)

def user_get_by_time(start_time=None, end_time=None):
    return IMPL.user_get_by_time(start_time=start_time, end_time=end_time)

def validate_user(user):
    return IMPL.validate_user(user)

def update_user(base, **values):
    return IMPL.update_user(base, **values)

def user_delete(user_id):
    IMPL.user_delete(user_id)


def service_get_by_idc(idc_id):
    return IMPL.service_get_by_idc(idc_id)

#@wrapper.dbcache
#def service_get(zone_id):
#    return IMPL.service_get(zone_id)

def service_create(values):
    return IMPL.service_create(values)


def network_get(net_id=None, zone_id=None):
    return IMPL.network_get(net_id=net_id, zone_id=zone_id)

def network_get_all(zone=None):
    return IMPL.network_get_all(zone=zone)

def network_create(zone, values):
    return IMPL.network_create(zone, values)

def network_delete(id=None, zone=None):
    IMPL.network_delete(id=id, zone=zone)

def network_type_get(id=None):
    return IMPL.network_type_get(id=id)

def network_type_update(cidr):
    return IMPL.network_type_update(cidr)

def network_type_delete(id):
    IMPL.network_type_delete(id)
