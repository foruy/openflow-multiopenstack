import sys
import traceback
from oslo.config import cfg
from eventlet import greenthread

from daoliproxy import context
from daoliproxy import utils
from daoliproxy.db import base
from daoliproxy.openstack.common import timeutils
from daoliproxy.openstack.common import log as logging
from daoliproxy.openstack.common import periodic_task

from proxyclient.client import HTTPClient

CONF = cfg.CONF
CONF.import_opt('auth_expires', 'daoliproxy.db.base')
CONF.register_opt(cfg.IntOpt('agent_port', default=65535))

LOG = logging.getLogger(__name__)

class Manager(base.Base, periodic_task.PeriodicTasks):

    def periodic_tasks(self, raise_on_error=False):
        """Tasks to be run at a periodic interval."""
        return self.run_periodic_tasks(context.get_admin_context(),
                                       raise_on_error=raise_on_error)

    def init_host(self):
        """Hook to do additional manager initialization when one requests
        the service be started.  This is called before any service record
        is created.

        Child classes should override this method.
        """
        pass

    def cleanup_host(self):
        """Hook to do cleanup work when the service shuts down.

        Child classes should override this method.
        """
        pass

    def pre_start_hook(self):
        """Hook to provide the manager the ability to do additional
        start-up work before any RPC queues/consumers are created. This is
        called after other initialization has succeeded and a service
        record is created.

        Child classes should override this method.
        """
        pass

    def post_start_hook(self):
        """Hook to provide the manager the ability to do additional
        start-up work immediately after a service creates RPC consumers
        and starts 'running'.

        Child classes should override this method.
        """
        pass

class ProxyManager(Manager):

    def __init__(self, db_driver=None):
        self.client = HTTPClient()
        super(ProxyManager, self).__init__(db_driver=db_driver)

    @periodic_task.periodic_task
    def _clean_cache(self, context):
        """Clean expired cache data."""
        for id, user in self.cache_db.user_map.items():
            if timeutils.is_older_than(user['time'], CONF.auth_expires):
                LOG.debug("Clean user %s", user)
                self.cache_db.user_clear(id)
            greenthread.sleep(0)

    @periodic_task.periodic_task
    def _sync_database(self, context):
        """Ensure that local instances sync status with remote."""
        for zone in self.db.zone_get_all():

            if zone.idc_id != CONF.idc_id:
                continue

            url = utils.replace_url(zone['auth_url'], port=CONF.agent_port, path='')
            self.client.set_management_url(url)
            data = {'filters': {'sort_key': 'created_at',
                                'sort_dir': 'desc',
                                'deleted': False}}
            try:
                resp, body = self.client.post('/instances', body=data)
                if zone['disabled']:
                    self.db.zone_update(zone['id'], {'disabled': False})
            except Exception as e:
                #LOG.error(traceback.format_exception(*sys.exc_info()))
                LOG.error(e)
                if not zone['disabled']:
                    self.db.zone_update(zone['id'], {'disabled': True})
                continue
            instances = dict([(inst['uuid'], inst) for inst in body.get('instances')])
            self._sync_instance(zone['id'], instances)
            greenthread.sleep(0)

    def _sync_instance(self, id, instances):
        servers = self.db.server_get_by_zone(id)
        for server in servers:
            instance = instances.get(server['id'])
            if instance and (server['status'] != instance['vm_state'] or \
                    server['power_state'] != instance['power_state']):
                LOG.info('Changing Instance Status [vm_state:power_state] from '
                         '[%s:%s] to [%s:%s]' % (
                         server['status'], server['power_state'],
                         instance['vm_state'], instance['power_state']))
                values = {'status': instance['vm_state'],
                          'power_state': instance['power_state']}
                self.db.server_update(server['id'], values)
